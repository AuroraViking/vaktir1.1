import { collection, getDocs, addDoc, deleteDoc, doc, updateDoc, query, where, getDoc, setDoc } from "https://www.gstatic.com/firebasejs/9.6.10/firebase-firestore.js";

window.onload = function() {
  setTimeout(async function() {

    const nameInput = document.getElementById("name");
if (nameInput) {
  nameInput.style.display = "none"; // Just hide it, don't remove
}


    const months = ["September", "October", "November", "December", "January", "February", "March", "April"];
    const daysInMonth = {
      September: 30,
      October: 31,
      November: 30,
      December: 31,
      January: 31,
      February: 29,
      March: 31,
      April: 30,
    };

    let selectedMonth = "September";
    let selectedDays = [];
    let signupsData = {};
    let viewingMyShifts = false;
    let tempComment = "";
    let isAdmin = false;
    let loggedInGuide = null; // Store logged in guide object

    // Show login options or registration
    async function showLoginOptions() {
      const loginPopup = document.createElement("div");
      loginPopup.style.position = "fixed";
      loginPopup.style.top = "50%";
      loginPopup.style.left = "50%";
      loginPopup.style.transform = "translate(-50%, -50%)";
      loginPopup.style.background = "#222";
      loginPopup.style.padding = "30px";
      loginPopup.style.border = "2px solid #00ffe1";
      loginPopup.style.borderRadius = "10px";
      loginPopup.style.zIndex = "1000";
      loginPopup.style.textAlign = "center";
     loginPopup.innerHTML = `
  <h2 style="margin-bottom: 20px;">Login</h2>
  <input id="login-email" type="email" placeholder="Email" 
    style="width: 100%; padding: 12px; margin: 10px 0; font-size: 16px; background: #111; color: white; border: 1px solid #00ffe1; border-radius: 8px;">
  <input id="login-password" type="password" placeholder="Password" 
    style="width: 100%; padding: 12px; margin: 10px 0; font-size: 16px; background: #111; color: white; border: 1px solid #00ffe1; border-radius: 8px;">
  <div style="display: flex; justify-content: space-around; margin-top: 20px;">
    <button id="guide-login" style="padding: 10px 20px; background: #555; color: white; border: none; border-radius: 8px; cursor: pointer;">Guide Login</button>
    <button id="admin-login" style="padding: 10px 20px; background: #00ffe1; color: black; border: none; border-radius: 8px; cursor: pointer;">Admin Login</button>
  </div>
  <hr style="margin: 20px 0; border-color: #555;">
  <p>New guide? <button id="show-register" style="background: none; border: none; color: #00ffe1; cursor: pointer; text-decoration: underline;">Register here</button></p>
`;

      document.body.appendChild(loginPopup);

      document.getElementById("guide-login").onclick = async () => {
        const email = document.getElementById("login-email").value.trim();
        const password = document.getElementById("login-password").value.trim();
        
        if (!email || !password) {
          alert("Please enter both email and password");
          return;
        }
        
        try {
          const guideExists = await checkGuideCredentials(email, password);
          if (guideExists) {
            loggedInGuide = guideExists;
            loginPopup.remove();
            initApp();
            // Automatically show guide's shifts
            viewingMyShifts = true;
            renderTabs();
            renderMyShiftsWithName(loggedInGuide.name);
          } else {
            alert("Invalid credentials");
          }
        } catch (error) {
          console.error("Login error:", error);
          alert("Login failed. Please try again.");
        }
      };

      document.getElementById("admin-login").onclick = () => {
        const password = document.getElementById("login-password").value.trim();
        if (password === "aurora123") {
          isAdmin = true;
          alert("Admin mode enabled!");
          loginPopup.remove();
          initApp();
        } else {
          alert("Incorrect admin password");
        }
      };

      
      document.getElementById("show-register").onclick = () => {
        loginPopup.remove();
        showRegistrationForm();
      };
    }
    
    // Show registration form for new guides
    function showRegistrationForm() {
      const registerPopup = document.createElement("div");
      registerPopup.style.position = "fixed";
      registerPopup.style.top = "50%";
      registerPopup.style.left = "50%";
      registerPopup.style.transform = "translate(-50%, -50%)";
      registerPopup.style.background = "#222";
      registerPopup.style.padding = "30px";
      registerPopup.style.border = "2px solid #00ffe1";
      registerPopup.style.borderRadius = "10px";
      registerPopup.style.zIndex = "1000";
      registerPopup.style.textAlign = "center";
      registerPopup.innerHTML = `
        <h2 style="margin-bottom: 20px;">Guide Registration</h2>
        <input id="reg-name" type="text" placeholder="Full Name" 
          style="width: 100%; padding: 12px; margin: 10px 0; font-size: 16px; background: #111; color: white; border: 1px solid #00ffe1; border-radius: 8px;">
        <input id="reg-email" type="email" placeholder="Email" 
          style="width: 100%; padding: 12px; margin: 10px 0; font-size: 16px; background: #111; color: white; border: 1px solid #00ffe1; border-radius: 8px;">
        <input id="reg-password" type="password" placeholder="Password" 
          style="width: 100%; padding: 12px; margin: 10px 0; font-size: 16px; background: #111; color: white; border: 1px solid #00ffe1; border-radius: 8px;">
        <input id="reg-confirm-password" type="password" placeholder="Confirm Password" 
          style="width: 100%; padding: 12px; margin: 10px 0; font-size: 16px; background: #111; color: white; border: 1px solid #00ffe1; border-radius: 8px;">
        <div style="display: flex; justify-content: space-around; margin-top: 20px;">
          <button id="register-guide" style="padding: 10px 20px; background: #00ffe1; color: black; border: none; border-radius: 8px; cursor: pointer;">Register</button>
          <button id="back-to-login" style="padding: 10px 20px; background: #555; color: white; border: none; border-radius: 8px; cursor: pointer;">Back to Login</button>
        </div>
      `;
      document.body.appendChild(registerPopup);
      
      document.getElementById("register-guide").onclick = async () => {
        const name = document.getElementById("reg-name").value.trim();
        const email = document.getElementById("reg-email").value.trim();
        const password = document.getElementById("reg-password").value.trim();
        const confirmPassword = document.getElementById("reg-confirm-password").value.trim();
        
        if (!name || !email || !password) {
          alert("Please fill out all fields");
          return;
        }
        
        if (password !== confirmPassword) {
          alert("Passwords do not match");
          return;
        }
        
        try {
          // Check if email already exists
          const emailExists = await checkEmailExists(email);
          if (emailExists) {
            alert("Email already registered. Please use a different email.");
            return;
          }
          
          // Register new guide
          await registerGuide(name, email, password);
          alert("Registration successful! You can now log in.");
          registerPopup.remove();
          showLoginOptions();
        } catch (error) {
          console.error("Registration error:", error);
          alert("Registration failed. Please try again.");
        }
      };
      
      document.getElementById("back-to-login").onclick = () => {
        registerPopup.remove();
        showLoginOptions();
      };
    }
    
    // Check if guide credentials are valid
    async function checkGuideCredentials(email, password) {
      try {
        const guidesRef = collection(window.db, "guides");
        const q = query(guidesRef, where("email", "==", email));
        const querySnapshot = await getDocs(q);
        
        if (!querySnapshot.empty) {
          const guideDoc = querySnapshot.docs[0];
          const guideData = guideDoc.data();
          
          if (guideData.password === password) {
            return {
              id: guideDoc.id,
              name: guideData.name,
              email: guideData.email
            };
          }
        }
        return null;
      } catch (error) {
        console.error("Error checking guide credentials:", error);
        throw error;
      }
    }
    
    // Check if email already exists
    async function checkEmailExists(email) {
      try {
        const guidesRef = collection(window.db, "guides");
        const q = query(guidesRef, where("email", "==", email));
        const querySnapshot = await getDocs(q);
        return !querySnapshot.empty;
      } catch (error) {
        console.error("Error checking email:", error);
        throw error;
      }
    }
    
    // Register new guide
    async function registerGuide(name, email, password) {
      try {
        await addDoc(collection(window.db, "guides"), {
          name,
          email,
          password,
          registeredOn: new Date().toISOString()
        });
      } catch (error) {
        console.error("Error registering guide:", error);
        throw error;
      }
    }

    async function fetchSignups() {
      const snapshot = await getDocs(collection(window.db, "signups"));
      signupsData = {};
      snapshot.forEach(docSnap => {
        const data = docSnap.data();
        if (!signupsData[data.date]) {
          signupsData[data.date] = [];
        }
        signupsData[data.date].push({ id: docSnap.id, name: data.name, approved: data.approved || false });
      });
    }
    
    function renderTabs() {
      const tabDiv = document.getElementById("month-tabs");
      tabDiv.innerHTML = '';

      months.forEach(month => {
        const btn = document.createElement("button");
        btn.textContent = month;
        btn.className = "month-tab";
        if (month === selectedMonth && !viewingMyShifts) {
          btn.classList.add("selected");
        }
        btn.onclick = async () => {
          selectedMonth = month;
          viewingMyShifts = false;
          renderTabs();
          await fetchSignups();
          renderCalendar();
        };
        tabDiv.appendChild(btn);
      });

      // Only show "My Shifts" tab for logged in guides or admin
      if (loggedInGuide || isAdmin) {
        const myShiftsBtn = document.createElement("button");
        myShiftsBtn.textContent = loggedInGuide ? `${loggedInGuide.name}'s Shifts` : "My Shifts";
        myShiftsBtn.className = "month-tab";
        if (viewingMyShifts) {
          myShiftsBtn.classList.add("selected");
        }
        myShiftsBtn.onclick = () => {
          viewingMyShifts = true;
          renderTabs();
          if (loggedInGuide) {
            renderMyShiftsWithName(loggedInGuide.name);
          } else {
            renderMyShiftsView();
          }
        };
        tabDiv.appendChild(myShiftsBtn);
      }
    }

    function renderCalendar() {
      const cal = document.getElementById("calendar");
      cal.innerHTML = "";
      
      for (let day = 1; day <= daysInMonth[selectedMonth]; day++) {
        const div = document.createElement("div");
        div.className = "day";
        const dateKey = `${selectedMonth}-${day}`;
        const guides = signupsData[dateKey] || [];
        const count = guides.length;

        let initialsHTML = guides.map(g => `<span style='color: ${g.approved ? "lightgreen" : "white"};'>${g.name[0]}</span>`).join(' ');

        div.innerHTML = `<strong>${day}</strong> (${count})<br><small>${initialsHTML}</small>`;

        if (count >= 5) {
          div.classList.add("full");
        }

        // Only allow clicking days if not in guest mode
        div.onclick = () => toggleDay(day, div);

        div.ondblclick = () => showDaySignups(dateKey);

        cal.appendChild(div);
      }
      
    }

    function toggleDay(day, element) {
      if (selectedDays.includes(day)) {
        selectedDays = selectedDays.filter(d => d !== day);
        element.classList.remove("selected");
      } else {
        selectedDays.push(day);
        element.classList.add("selected");
      }
    }
    
    function showDaySignups(dateKey) {
      const guides = signupsData[dateKey] || [];
      if (guides.length === 0) {
        alert("No guides signed up for this date.");
        return;
      }
      const popup = document.createElement("div");
      popup.style.position = "fixed";
      popup.style.top = "50%";
      popup.style.left = "50%";
      popup.style.transform = "translate(-50%, -50%)";
      popup.style.background = "#222";
      popup.style.padding = "20px";
      popup.style.border = "2px solid #00ffe1";
      popup.style.zIndex = "999";
      popup.innerHTML = `
        <h3>Guides for ${dateKey}</h3>
        ${guides.map(g => `
          <div id="guide-${g.id}" style="margin:10px;${g.approved ? ' color: lightgreen;' : ''}">
            ${g.name}
            ${isAdmin ? `<button onclick="removeSignup('${g.id}')">Remove</button>` : ''}
            ${isAdmin ? `<button onclick="approveSignup('${g.id}')">Approve</button>` : ''}
          </div>
        `).join('')}
        <br>
        <button onclick="this.parentElement.remove()">Close</button>
      `;
      document.body.appendChild(popup);
    }

    window.removeSignup = async function(id) {
      await deleteDoc(doc(window.db, "signups", id));
      alert("Guide removed!");
      await fetchSignups();
      renderCalendar();
      const popup = document.querySelector("div[style*='position: fixed']");
      if (popup) popup.remove();
    };

    window.approveSignup = async function(id) {
      const docRef = doc(window.db, "signups", id);
      await updateDoc(docRef, { approved: true });
      await fetchSignups();
      renderCalendar();
      const popup = document.querySelector("div[style*='position: fixed']");
      if (popup) popup.remove();
    };
    
    function renderMyShiftsWithName(guideName) {
      const cal = document.getElementById("calendar");
      cal.innerHTML = '';
      
      const headerDiv = document.createElement("div");
      headerDiv.innerHTML = `<h3>Welcome, ${guideName}!</h3>`;
      headerDiv.style.textAlign = "center";
      headerDiv.style.marginBottom = "20px";
      cal.appendChild(headerDiv);
      
      const myShifts = [];
      const myApprovedShifts = [];

      for (const [date, entries] of Object.entries(signupsData)) {
        entries.forEach(e => {
          if (e.name === guideName) {
            myShifts.push(date);
            if (e.approved) {
              myApprovedShifts.push(date);
            }
          }
        });
      }

      const resultsDiv = document.createElement("div");
      resultsDiv.innerHTML = `
        <h3>Your Shifts:</h3>
        ${myShifts.length > 0 ? `<ul>${myShifts.map(d => `<li>${d}</li>`).join('')}</ul>` : '<p>No shifts found.</p>'}
        <h3>✅ Approved Shifts:</h3>
        ${myApprovedShifts.length > 0 ? `<ul>${myApprovedShifts.map(d => `<li>${d}</li>`).join('')}</ul>` : '<p>No approved shifts yet.</p>'}
      `;
      cal.appendChild(resultsDiv);
      
      // Add a button to sign up for more shifts
      const signupButton = document.createElement("button");
      signupButton.textContent = "Sign up for more shifts";
      signupButton.style.display = "block";
      signupButton.style.margin = "20px auto";
      signupButton.style.padding = "10px 20px";
      signupButton.style.background = "#00ffe1";
      signupButton.style.color = "black";
      signupButton.style.border = "none";
      signupButton.style.borderRadius = "8px";
      signupButton.style.cursor = "pointer";
      signupButton.onclick = () => {
        selectedMonth = "September";
        viewingMyShifts = false;
        renderTabs();
        renderCalendar();
        // Pre-fill the name field with the guide's name
        document.getElementById("name").value = guideName;
      };
      cal.appendChild(signupButton);
    }
    
    function renderMyShiftsView() {
      const cal = document.getElementById("calendar");
      cal.innerHTML = '';

      const input = document.createElement("input");
      input.type = "text";
      input.placeholder = "Enter guide name";
      input.style.marginBottom = "10px";
      cal.appendChild(input);

      const button = document.createElement("button");
      button.textContent = "Find Shifts";
      button.style.display = "block";
      button.style.margin = "10px auto";
      cal.appendChild(button);

      const resultsDiv = document.createElement("div");
      cal.appendChild(resultsDiv);

      button.onclick = () => {
        const name = input.value.trim();
        if (!name) return;

        const myShifts = [];
        const myApprovedShifts = [];

        for (const [date, entries] of Object.entries(signupsData)) {
          entries.forEach(e => {
            if (e.name === name) {
              myShifts.push(date);
              if (e.approved) {
                myApprovedShifts.push(date);
              }
            }
          });
        }

        resultsDiv.innerHTML = `
          <h3>Shifts for ${name}:</h3>
          ${myShifts.length > 0 ? `<ul>${myShifts.map(d => `<li>${d}</li>`).join('')}</ul>` : '<p>No shifts found.</p>'}
          <h3>✅ Approved Shifts:</h3>
          ${myApprovedShifts.length > 0 ? `<ul>${myApprovedShifts.map(d => `<li>${d}</li>`).join('')}</ul>` : '<p>No approved shifts yet.</p>'}
        `;
      };
    }

    function showCommentPopup(callback) {
      const popup = document.createElement("div");
      popup.style.position = "fixed";
      popup.style.top = "50%";
      popup.style.left = "50%";
      popup.style.transform = "translate(-50%, -50%)";
      popup.style.background = "#222";
      popup.style.padding = "20px";
      popup.style.border = "2px solid #00ffe1";
      popup.style.zIndex = "999";
      popup.innerHTML = `
        <h3>Add a comment?</h3>
        <input type="text" id="popup-comment" style="width: 100%; padding: 10px; margin-top: 10px; background: #111; color: white; border: 1px solid #00ffe1; border-radius: 6px;">
        <br><br>
        <button id="saveComment">Save Comment</button>
        <button id="skipComment">Skip</button>
      `;

      document.body.appendChild(popup);

      document.getElementById("saveComment").onclick = function() {
        tempComment = document.getElementById("popup-comment").value.trim();
        popup.remove();
        callback();
      };

      document.getElementById("skipComment").onclick = function() {
        tempComment = "";
        popup.remove();
        callback();
      };
    }

    async function submitSignup() {
      // Don't allow guests to submit
      if (isGuest) {
        alert("Please log in to sign up for shifts");
        return;
      }
      
      const name = document.getElementById("name").value.trim();
      if (!name) return;

      showCommentPopup(async () => {
        for (let day of selectedDays) {
          const dateKey = `${selectedMonth}-${day}`;
          await addDoc(collection(window.db, "signups"), {
            date: dateKey,
            name,
            comment: tempComment,
            approved: false
          });
        }

        selectedDays = [];
        document.getElementById("name").value = "";
        document.getElementById("calendar").innerHTML = "";
        document.getElementById("confirmation").style.display = "block";

        await fetchSignups();
        renderTabs();
        renderCalendar();

        setTimeout(() => {
          document.getElementById("confirmation").style.display = "none";
        }, 3000);
      });
    }

    async function exportSignups() {
      let csvContent = "data:text/csv;charset=utf-8,Date,Name,Approved\n";
      for (const [date, entries] of Object.entries(signupsData)) {
        entries.forEach(e => {
          csvContent += `${date},${e.name},${e.approved ? "Yes" : "No"}\n`;
        });
      }
      const encodedUri = encodeURI(csvContent);
      const link = document.createElement("a");
      link.setAttribute("href", encodedUri);
      link.setAttribute("download", "aurora_viking_shifts.csv");
      document.body.appendChild(link);
      link.click();
      document.body.removeChild(link);
    }

    async function initApp() {
      // Show appropriate badge based on user type
      if (isAdmin) {
        const adminBadge = document.createElement("div");
        adminBadge.style.position = "fixed";
        adminBadge.style.top = "10px";
        adminBadge.style.right = "10px";
        adminBadge.style.background = "#00ffe1";
        adminBadge.style.color = "black";
        adminBadge.style.padding = "10px 20px";
        adminBadge.style.borderRadius = "8px";
        adminBadge.innerText = "Admin Mode";
        document.body.appendChild(adminBadge);

    // Create Combined Navigation + Logout Menu
const navMenu = document.createElement("div");
navMenu.style.position = "fixed";
navMenu.style.top = "10px";
navMenu.style.left = "10px"; // top left corner
navMenu.style.zIndex = "999";

navMenu.innerHTML = `
  <select id="navigationSelect" style="
    font-size: 16px;
    padding: 8px 12px;
    background: #111;
    border: 2px solid #00ffe1;
    color: #00ffe1;
    border-radius: 8px;
    font-weight: bold;
    box-shadow: 0 0 15px #00ffe1, 0 0 30px #00ffe1;
    animation: glowPulse 2.5s infinite alternate;
    cursor: pointer;
  ">
    <option value="">Valmöguleikar</option>
    <option value="tracker">Fleet Tracker - Tablet</option>
    ${isAdmin ? '<option value="dashboard">Fleet Dashboard - Admin</option>' : ''}
    <option value="logout">Logout</option>
  </select>
`;
document.body.appendChild(navMenu);

// Handle selection changes
document.getElementById('navigationSelect').addEventListener('change', (e) => {
  const choice = e.target.value;
  if (choice === "tracker") {
    window.location.href = "https://auroraviking.github.io/FleetTracker1.0/";
  } else if (choice === "dashboard") {
    window.location.href = "https://auroraviking.github.io/FleetTracker1.0/dashboard.html";
  } else if (choice === "logout") {
    location.reload(); // simple logout
  }
});


        const exportButton = document.createElement("button");
        exportButton.innerText = "Export Shifts";
        exportButton.style.position = "fixed";
        exportButton.style.bottom = "10px";
        exportButton.style.right = "10px";
        exportButton.style.padding = "10px 20px";
        exportButton.style.background = "#00ffe1";
        exportButton.style.color = "black";
        exportButton.style.border = "none";
        exportButton.style.borderRadius = "8px";
        exportButton.style.cursor = "pointer";
        exportButton.onclick = exportSignups;
        document.body.appendChild(exportButton);
      } else if (loggedInGuide) {
        // Add badge for logged in guide
        const guideBadge = document.createElement("div");
        guideBadge.style.position = "fixed";
        guideBadge.style.top = "10px";
        guideBadge.style.right = "10px";
        guideBadge.style.background = "#555";
        guideBadge.style.color = "white";
        guideBadge.style.padding = "10px 20px";
        guideBadge.style.borderRadius = "8px";
        guideBadge.innerText = `Guide: ${loggedInGuide.name}`;        
        document.body.appendChild(guideBadge);

      // Create Combined Navigation + Logout Menu
const navMenu = document.createElement("div");
navMenu.style.position = "fixed";
navMenu.style.top = "10px";
navMenu.style.left = "10px"; // top left corner
navMenu.style.zIndex = "999";

navMenu.innerHTML = `
  <select id="navigationSelect" style="
    font-size: 16px;
    padding: 8px 12px;
    background: #111;
    border: 2px solid #00ffe1;
    color: #00ffe1;
    border-radius: 8px;
    font-weight: bold;
    box-shadow: 0 0 15px #00ffe1, 0 0 30px #00ffe1;
    animation: glowPulse 2.5s infinite alternate;
    cursor: pointer;
  ">
    <option value="">Valmöguleikar</option>
    <option value="tracker">Fleet Tracker - Tablet</option>
    ${isAdmin ? '<option value="dashboard">Fleet Dashboard - Admin</option>' : ''}
    <option value="logout">Logout</option>
  </select>
`;
document.body.appendChild(navMenu);

// Handle selection changes
document.getElementById('navigationSelect').addEventListener('change', (e) => {
  const choice = e.target.value;
  if (choice === "tracker") {
    window.location.href = "https://auroraviking.github.io/FleetTracker1.0/";
  } else if (choice === "dashboard") {
    window.location.href = "https://auroraviking.github.io/FleetTracker1.0/dashboard.html";
  } else if (choice === "logout") {
    location.reload(); // simple logout
  }
});


      // Set up submit button handler
      document.getElementById("submit").onclick = submitSignup;
      
      // Fetch data and render appropriate view
      await fetchSignups();
      renderTabs();
      
     if (loggedInGuide) {
  viewingMyShifts = false; // << show calendar first, not 'my shifts'
  await fetchSignups();     // << fetch data again
  renderTabs();
  renderCalendar();         // << render normal calendar after login
  const nameInput = document.getElementById("name");
  if (nameInput) {
    nameInput.remove();
  }
} else {
  await fetchSignups();
  renderTabs();
  renderCalendar();
}

    }

    // Check if the 'guides' collection exists, create it if not
    async function ensureGuidesCollection() {
      try {
        const guidesRef = collection(window.db, "guides");
        const snapshot = await getDocs(guidesRef);
        
        // If no error, collection exists
        console.log("Guides collection checked");
      } catch (error) {
        console.error("Error checking guides collection:", error);
        // Collection may not exist, but this will be handled when adding guides
      }
    }

    // Initialize the app
    await ensureGuidesCollection();
    showLoginOptions();

  }, 100);
};
    
